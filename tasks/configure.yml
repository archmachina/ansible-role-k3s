---

- when: inventory_hostname == k3s_configure_server_name
  block:
    - name: Download k3s binary
      ansible.builtin.get_url:
        dest: /usr/local/bin/k3s
        url: "{{ k3s_binary_url }}"
        owner: root
        group: root
        mode: "0755"
        force: true
      # notify: 'restart k3s'
      register: k3s_state_download_binary

    - name: k3s directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0750"
      loop:
        - /etc/rancher
        - /etc/rancher/k3s

    - name: k3s config
      ansible.builtin.copy:
        content: "{{ k3s_config_content }}"
        dest: /etc/rancher/k3s/config.yaml
        owner: root
        group: root
        mode: "0644"
      # notify: 'restart k3s'
      register: k3s_state_config

    - name: Symlinks
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          which "{{ item }}" || (ln -s "{{ k3s_binary_path}}" "/usr/local/bin/{{ item }}" && exit 5)
      register: k3s_symlink_status
      changed_when: k3s_symlink_status.rc == 5
      failed_when: k3s_symlink_status.rc != 5 and k3s_symlink_status.rc != 0
      loop:
        - kubectl
        - crictl
        - ctr

    - name: Systemd service
      ansible.builtin.template:
        src: k3s.service.j2
        dest: /etc/systemd/system/k3s.service
        owner: root
        group: root
        mode: "0640"
      # notify: 'restart k3s'
      register: k3s_state_service

    - name: Systemd service environment
      ansible.builtin.template:
        src: k3s.service.env.j2
        dest: /etc/systemd/system/k3s.service.env
        owner: root
        group: root
        mode: "0640"
      # notify: 'restart k3s'
      register: k3s_state_service_env

    - name: Enable k3s service
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        enabled: true

    # Flush handlers seems to break the calling loop early when there are handlers to
    # process (i.e. all agents/servers wouldn't run)
    # Creating explicit states for each of the conditions for restart doesn't seem
    # to trigger this issue.
    # Left here as a reminder as to the reason to not use handlers
    # - name: Flush handlers
    #   ansible.builtin.meta: flush_handlers
    - name: Flag for restart k3s service
      ansible.builtin.set_fact:
        k3s_service_state: restarted
      when: >
        k3s_state_service_env.changed or k3s_state_service.changed or
        k3s_state_download_binary.changed or k3s_state_config.changed

    - name: Start k3s service
      ansible.builtin.systemd:
        name: k3s
        state: '{{ k3s_service_state }}'
